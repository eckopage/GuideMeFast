name: Version and Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  version-and-release:
    # Uruchom tylko dla merged PR lub bezpo≈õredniego push do main
    if: github.event.pull_request.merged == true || (github.event_name == 'push' && contains(fromJson('["main", "master"]'), github.ref_name))
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Quality gates
      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint

      - name: Build package
        run: npm run build

      # Determine version bump from conventional commits
      - name: Analyze commits for version bump
        id: version
        run: |
          # Check if any tags exist
          if ! git describe --tags --abbrev=0 >/dev/null 2>&1; then
            echo "No previous tags found - creating first release"
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "first-release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get last tag
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $LAST_TAG"

          # Get commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)

          if [ -z "$COMMITS" ]; then
           echo "No new commits since last release"
           echo "should-release=false" >> $GITHUB_OUTPUT
           exit 0
          fi

          echo "Commits since $LAST_TAG:"
          echo "$COMMITS"

          # Rest of the analysis logic...

      - name: Configure Git
        if: steps.version.outputs.should-release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        if: steps.version.outputs.should-release == 'true'
        id: bump
        run: |
          BUMP_TYPE="${{ steps.version.outputs.bump-type }}"
          FIRST_RELEASE="${{ steps.version.outputs.first-release }}"

          if [ "$FIRST_RELEASE" = "true" ]; then
            # For first release, start with version from package.json or 1.0.0
            CURRENT_VERSION=$(node -p "require('./package.json').version")
            echo "new-version=v$CURRENT_VERSION" >> $GITHUB_OUTPUT
            echo "version-number=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          else
            echo "Bumping $BUMP_TYPE version..."
            NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
            echo "Version bumped to $NEW_VERSION"

            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "version-number=$(echo $NEW_VERSION | sed 's/v//')" >> $GITHUB_OUTPUT
          fi

      - name: Rebuild with new version
        if: steps.version.outputs.should-release == 'true'
        run: npm run build

      - name: Verify build output
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo "Verifying build output..."
          REQUIRED_FILES=(
            "dist/index.js"
            "dist/index.esm.js"
            "dist/index.d.ts"
            "dist/vanilla.js"
            "dist/guidemefast.min.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done
          echo "‚úÖ All required files present"

      - name: Create commit and tag
        if: steps.version.outputs.should-release == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new-version }}"

          # Add any changes
          git add -A

          # Create simple commit message
          COMMIT_MSG="chore: release $NEW_VERSION"

          # Commit only if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          fi

          # Create tag
          git tag "$NEW_VERSION"
          echo "Created tag: $NEW_VERSION"

      - name: Push changes and tags
        if: steps.version.outputs.should-release == 'true'
        run: |
          # Check if there are local commits to push
          if [ "$(git rev-list HEAD...origin/${{ github.ref_name }} --count)" != "0" ] 2>/dev/null; then
            echo "Pushing commits to ${{ github.ref_name }}..."
            git push origin ${{ github.ref_name }}
          else
            echo "No commits to push to branch"
          fi
          
          # Always push the tag
          echo "Pushing tag ${{ steps.bump.outputs.new-version }}..."
          git push origin ${{ steps.bump.outputs.new-version }}
          echo "‚úÖ Tag pushed successfully"

      - name: Publish to NPM
        if: steps.version.outputs.should-release == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "Publishing to NPM..."
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          
          # Check if it's a pre-release version
          if echo "$VERSION_NUMBER" | grep -qE "(alpha|beta|rc)"; then
            echo "Publishing pre-release version with 'next' tag"
            npm publish --tag next
          else
            echo "Publishing stable release"
            npm publish
          fi
          
          echo "‚úÖ Published guidemefast@$VERSION_NUMBER to NPM"

      - name: Create GitHub Release
        if: steps.version.outputs.should-release == 'true'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.bump.outputs.new-version }}
          release_name: "GuideMeFast ${{ steps.bump.outputs.new-version }}"
          body_path: release_notes.txt
          draft: false
          prerelease: ${{ contains(steps.bump.outputs.version-number, 'alpha') || contains(steps.bump.outputs.version-number, 'beta') || contains(steps.bump.outputs.version-number, 'rc') }}

      - name: Verify NPM publication
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo "Waiting for NPM propagation..."
          sleep 30
          
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npm view guidemefast@$VERSION_NUMBER version >/dev/null 2>&1; then
              echo "‚úÖ Package verified on NPM registry"
              PUBLISHED_VERSION=$(npm view guidemefast@$VERSION_NUMBER version)
              echo "Published version: $PUBLISHED_VERSION"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Verification attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in 10s..."
                sleep 10
              else
                echo "‚ùå Failed to verify package after $MAX_RETRIES attempts"
                echo "This might be due to NPM propagation delay - check manually"
                break
              fi
            fi
          done

      - name: Verify CDN availability
        if: steps.version.outputs.should-release == 'true'
        run: |
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          
          echo "Checking CDN availability..."
          
          # Check UnPkg
          UNPKG_URL="https://unpkg.com/guidemefast@$VERSION_NUMBER/dist/guidemefast.min.js"
          if curl -s --head "$UNPKG_URL" | head -n 1 | grep -q "200 OK"; then
            echo "‚úÖ UnPkg CDN available"
          else
            echo "‚ö†Ô∏è UnPkg CDN not yet available (may take a few minutes)"
          fi
          
          # Check jsDelivr
          JSDELIVR_URL="https://cdn.jsdelivr.net/npm/guidemefast@$VERSION_NUMBER/dist/guidemefast.min.js"
          if curl -s --head "$JSDELIVR_URL" | head -n 1 | grep -q "200 OK"; then
            echo "‚úÖ jsDelivr CDN available"
          else
            echo "‚ö†Ô∏è jsDelivr CDN not yet available (may take a few minutes)"
          fi

      - name: Post-release summary
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo ""
          echo "üéâ GuideMeFast Release Summary"
          echo "=============================="
          echo "Package: guidemefast"
          echo "Version: ${{ steps.bump.outputs.new-version }}"
          echo "Release Type: ${{ steps.version.outputs.bump-type }}"
          echo ""
          echo "üì¶ NPM: https://www.npmjs.com/package/guidemefast"
          echo "üåê CDN: https://unpkg.com/guidemefast@latest/"
          echo "üìö Docs: https://github.com/${{ github.repository }}#readme"
          echo ""
          echo "The release is now live! üöÄ"
          echo ""
          echo "üìã Post-release checklist:"
          echo "- Monitor NPM download statistics"
          echo "- Verify CDN propagation (5-10 minutes)"
          echo "- Test package installation"
          echo "- Update documentation if needed"
          echo "- Announce release if applicable"

  # Separate job for non-release builds (PRs)
  test-only:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint

      - name: Build package
        run: npm run build

      - name: Verify build output
        run: |
          echo "Verifying build output..."
          REQUIRED_FILES=(
            "dist/index.js"
            "dist/index.esm.js"
            "dist/index.d.ts"
            "dist/vanilla.js"
            "dist/guidemefast.min.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "‚ùå Missing required file: $file"
              exit 1
            fi
          done
          echo "‚úÖ All required files present"

      - name: Test summary
        run: |
          echo "‚úÖ All quality checks passed!"
          echo "This PR is ready for merge when approved."
          echo ""
          echo "Build verification completed:"
          echo "- TypeScript compilation: ‚úÖ"
          echo "- ESLint checks: ‚úÖ" 
          echo "- Unit tests: ‚úÖ"
          echo "- Build output: ‚úÖ"