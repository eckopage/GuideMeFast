name: Version and Release

on:
  push:
    branches: [ main, master ]
    paths-ignore:
      - 'README.md'
      - 'CHANGELOG.md'
      - 'docs/**'
      - '.gitignore'
      - 'LICENSE'
  pull_request:
    branches: [ main, master ]
    types: [ closed ]

jobs:
  version-and-release:
    # Uruchom tylko dla merged PR lub bezpośredniego push do main
    if: github.event.pull_request.merged == true || (github.event_name == 'push' && contains(fromJson('["main", "master"]'), github.ref_name))
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      # Quality gates
      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint

      - name: Initial build for quality checks
        run: npm run build

      # Determine version bump from conventional commits
      - name: Analyze commits for version bump
        id: version
        run: |
          # Check if any tags exist
          if ! git describe --tags --abbrev=0 >/dev/null 2>&1; then
            echo "No previous tags found - creating first release"
            echo "bump-type=minor" >> $GITHUB_OUTPUT
            echo "should-release=true" >> $GITHUB_OUTPUT
            echo "first-release=true" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Get last tag
          LAST_TAG=$(git describe --tags --abbrev=0)
          echo "Last tag: $LAST_TAG"

          # Get commits since last tag
          COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges)

          if [ -z "$COMMITS" ]; then
           echo "No new commits since last release"
           echo "should-release=false" >> $GITHUB_OUTPUT
           exit 0
          fi

          echo "Commits since $LAST_TAG:"
          echo "$COMMITS"

          # Analyze commit messages for conventional commits
          BUMP_TYPE="patch"

          if echo "$COMMITS" | grep -qE "(feat|feature).*!:|BREAKING CHANGE|breaking change"; then
           BUMP_TYPE="major"
           echo "🚨 Breaking changes detected"
          elif echo "$COMMITS" | grep -qE "(feat|feature)(\(.+\))?:"; then
           BUMP_TYPE="minor"
           echo "✨ New features detected"
          elif echo "$COMMITS" | grep -qE "(fix|bugfix)(\(.+\))?:"; then
           BUMP_TYPE="patch"
           echo "🐛 Bug fixes detected"
          elif echo "$COMMITS" | grep -qE "(docs|chore|style|refactor|test|ci)(\(.+\))?:"; then
           echo "📝 Non-release commits detected - skipping release"
           echo "should-release=false" >> $GITHUB_OUTPUT
           exit 0
          fi

          echo "Determined bump type: $BUMP_TYPE"
          echo "bump-type=$BUMP_TYPE" >> $GITHUB_OUTPUT
          echo "should-release=true" >> $GITHUB_OUTPUT

      - name: Configure Git
        if: steps.version.outputs.should-release == 'true'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Bump version
        if: steps.version.outputs.should-release == 'true'
        id: bump
        run: |
          BUMP_TYPE="${{ steps.version.outputs.bump-type }}"
          FIRST_RELEASE="${{ steps.version.outputs.first-release }}"
          
          # Zawsze podbij wersję, nawet dla pierwszego release
          echo "Bumping $BUMP_TYPE version..."
          NEW_VERSION=$(npm version $BUMP_TYPE --no-git-tag-version)
          echo "Version bumped to $NEW_VERSION"
          
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "version-number=$(echo $NEW_VERSION | sed 's/v//')" >> $GITHUB_OUTPUT

      - name: Rebuild with new version and verify ES5 compatibility
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo "🔨 Building package with new version..."
          npm run build
          
          echo "🔍 Verifying ES5 compatibility..."
          # Create scripts directory if it doesn't exist
          mkdir -p scripts
          
          # Create verification script
          cat > scripts/verify-es5.js << 'EOF'
          const fs = require('fs');
          const path = require('path');
          
          const distDir = 'dist';
          const modernFeatures = [
            { pattern: /\?\./g, name: 'Optional Chaining (?.)' },
            { pattern: /\?\?/g, name: 'Nullish Coalescing (??)' },
            { pattern: /\basync\s+function/g, name: 'Async Functions' },
            { pattern: /\bawait\s/g, name: 'Await Operator' }
          ];
          
          function checkFile(filePath) {
            const content = fs.readFileSync(filePath, 'utf8');
            const issues = [];
          
            modernFeatures.forEach(feature => {
              const matches = content.match(feature.pattern);
              if (matches) {
                issues.push({ feature: feature.name, count: matches.length });
              }
            });
          
            return issues;
          }
          
          function scanDirectory(dir) {
            const files = fs.readdirSync(dir, { withFileTypes: true });
            let allIssues = {};
          
            files.forEach(file => {
              const fullPath = path.join(dir, file.name);
          
              if (file.isDirectory()) {
                const subIssues = scanDirectory(fullPath);
                Object.assign(allIssues, subIssues);
              } else if (file.name.endsWith('.js')) {
                const issues = checkFile(fullPath);
                if (issues.length > 0) {
                  allIssues[fullPath] = issues;
                }
              }
            });
          
            return allIssues;
          }
          
          console.log('🔍 Sprawdzanie kompatybilności ES5...');
          
          if (!fs.existsSync(distDir)) {
            console.error(`❌ Katalog ${distDir} nie istnieje.`);
            process.exit(1);
          }
          
          const allIssues = scanDirectory(distDir);
          
          if (Object.keys(allIssues).length === 0) {
            console.log('✅ Wszystkie pliki JS w dist/ są kompatybilne z ES5!');
            process.exit(0);
          }
          
          console.log('⚠️ Znaleziono potencjalne problemy z kompatybilnością:');
          Object.entries(allIssues).forEach(([filePath, issues]) => {
            console.log(`📄 ${filePath}:`);
            issues.forEach(issue => {
              console.log(`  • ${issue.feature} (${issue.count} wystąpień)`);
            });
          });
          
          const criticalIssues = Object.values(allIssues).flat()
            .filter(issue => ['Optional Chaining (?.)'].includes(issue.feature));
          
          if (criticalIssues.length > 0) {
            console.log('❌ KRYTYCZNE PROBLEMY: Znaleziono funkcje które złamią starsze przeglądarki!');
            process.exit(1);
          } else {
            console.log('ℹ️ Wykryte funkcje powinny być kompatybilne po transpilacji przez Babel.');
            console.log('✅ Biblioteka powinna działać poprawnie.');
          }
          EOF
          
          # Run verification
          node scripts/verify-es5.js

      - name: Verify build output
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo "Verifying build output..."
          REQUIRED_FILES=(
            "dist/index.js"
            "dist/index.esm.js"
            "dist/index.d.ts"
            "dist/vanilla.js"
            "dist/guidemefast.min.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"
          
          # Show file sizes
          echo "📊 Build sizes:"
          ls -lh dist/*.js dist/*.d.ts 2>/dev/null | awk '{print "  " $9 ": " $5}'

      - name: Create commit and tag
        if: steps.version.outputs.should-release == 'true'
        run: |
          NEW_VERSION="${{ steps.bump.outputs.new-version }}"

          # Add any changes
          git add -A

          # Create simple commit message
          COMMIT_MSG="chore: release $NEW_VERSION [skip ci]"

          # Commit only if there are changes
          if [ -n "$(git status --porcelain)" ]; then
            git commit -m "$COMMIT_MSG" || echo "No changes to commit"
          fi

          # Create tag
          git tag "$NEW_VERSION"
          echo "Created tag: $NEW_VERSION"

      - name: Push changes and tags
        if: steps.version.outputs.should-release == 'true'
        run: |
          # Check if there are local commits to push
          if [ "$(git rev-list HEAD...origin/${{ github.ref_name }} --count)" != "0" ] 2>/dev/null; then
            echo "Pushing commits to ${{ github.ref_name }}..."
            git push origin ${{ github.ref_name }}
          else
            echo "No commits to push to branch"
          fi
          
          # Always push the tag
          echo "Pushing tag ${{ steps.bump.outputs.new-version }}..."
          git push origin ${{ steps.bump.outputs.new-version }}
          echo "✅ Tag pushed successfully"

      - name: Check if version exists on NPM
        if: steps.version.outputs.should-release == 'true'
        run: |
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          
          if npm view guidemefast@$VERSION_NUMBER version >/dev/null 2>&1; then
            echo "❌ Version $VERSION_NUMBER already exists on NPM"
            echo "Available versions:"
            npm view guidemefast versions --json | tail -5
            exit 1
          else
            echo "✅ Version $VERSION_NUMBER is available for publishing"
          fi

      - name: Publish to NPM
        if: steps.version.outputs.should-release == 'true'
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          echo "📦 Publishing to NPM..."
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          
          # Check if it's a pre-release version
          if echo "$VERSION_NUMBER" | grep -qE "(alpha|beta|rc)"; then
            echo "Publishing pre-release version with 'next' tag"
            npm publish --tag next --access public
          else
            echo "Publishing stable release"
            npm publish --access public
          fi
          
          echo "✅ Published guidemefast@$VERSION_NUMBER to NPM"

      - name: Generate release notes
        if: steps.version.outputs.should-release == 'true'
        id: release-notes
        run: |
          echo "Generating release notes..."
          
          if git describe --tags --abbrev=0 >/dev/null 2>&1; then
            LAST_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
            if [ -n "$LAST_TAG" ] && [ "$LAST_TAG" != "${{ steps.bump.outputs.new-version }}" ]; then
              CHANGES=$(git log ${LAST_TAG}..HEAD~1 --oneline --no-merges | head -10 | sed 's/^/- /')
            else
              CHANGES="- Initial release"
            fi
          else
            CHANGES=$(git log --oneline --no-merges -5 HEAD~1 | sed 's/^/- /')
          fi
          
          if [ -z "$CHANGES" ]; then
            CHANGES="- Package improvements and updates"
          fi
          
          # Save to output file
          cat > release_notes.txt << EOF
          ## 🚀 GuideMeFast ${{ steps.bump.outputs.new-version }}
          
          **Release Type:** ${{ steps.version.outputs.bump-type }}
          
          ### 📦 Installation
          \`\`\`bash
          npm install guidemefast@${{ steps.bump.outputs.version-number }}
          \`\`\`
          
          ### 🌐 CDN Usage
          \`\`\`html
          <script src="https://unpkg.com/guidemefast@${{ steps.bump.outputs.version-number }}/dist/guidemefast.min.js"></script>
          \`\`\`
          
          ### 📊 What's Changed
          $CHANGES
          
          ### 🔧 Compatibility
          - ✅ ES5 compatible (IE11+)
          - ✅ React 16.8+
          - ✅ TypeScript support
          - ✅ Material-UI integration
          - ✅ Vanilla JavaScript support
          
          ---
          *This release was automatically created by GitHub Actions*
          EOF
          
          echo "✅ Release notes generated"

      - name: Create GitHub Release
        if: steps.version.outputs.should-release == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const releaseNotes = fs.readFileSync('release_notes.txt', 'utf8');
            
            const isPrerelease = '${{ steps.bump.outputs.version-number }}'.includes('alpha') || 
                                '${{ steps.bump.outputs.version-number }}'.includes('beta') || 
                                '${{ steps.bump.outputs.version-number }}'.includes('rc');
            
            const release = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ steps.bump.outputs.new-version }}',
              name: 'GuideMeFast ${{ steps.bump.outputs.new-version }}',
              body: releaseNotes,
              draft: false,
              prerelease: isPrerelease
            });
            
            console.log(`✅ Created release: ${release.data.html_url}`);

      - name: Verify NPM publication
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo "⏳ Waiting for NPM propagation..."
          sleep 30
          
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          MAX_RETRIES=10
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if npm view guidemefast@$VERSION_NUMBER version >/dev/null 2>&1; then
              echo "✅ Package verified on NPM registry"
              PUBLISHED_VERSION=$(npm view guidemefast@$VERSION_NUMBER version)
              echo "Published version: $PUBLISHED_VERSION"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Verification attempt $RETRY_COUNT/$MAX_RETRIES failed, retrying in 10s..."
                sleep 10
              else
                echo "❌ Failed to verify package after $MAX_RETRIES attempts"
                echo "This might be due to NPM propagation delay - check manually"
                break
              fi
            fi
          done

      - name: Verify CDN availability
        if: steps.version.outputs.should-release == 'true'
        run: |
          VERSION_NUMBER="${{ steps.bump.outputs.version-number }}"
          
          echo "🌐 Checking CDN availability..."
          
          # Check UnPkg
          UNPKG_URL="https://unpkg.com/guidemefast@$VERSION_NUMBER/dist/guidemefast.min.js"
          if curl -s --head "$UNPKG_URL" | head -n 1 | grep -q "200 OK"; then
            echo "✅ UnPkg CDN available: $UNPKG_URL"
          else
            echo "⚠️ UnPkg CDN not yet available (may take a few minutes)"
          fi
          
          # Check jsDelivr
          JSDELIVR_URL="https://cdn.jsdelivr.net/npm/guidemefast@$VERSION_NUMBER/dist/guidemefast.min.js"
          if curl -s --head "$JSDELIVR_URL" | head -n 1 | grep -q "200 OK"; then
            echo "✅ jsDelivr CDN available: $JSDELIVR_URL"
          else
            echo "⚠️ jsDelivr CDN not yet available (may take a few minutes)"
          fi

      - name: Post-release summary
        if: steps.version.outputs.should-release == 'true'
        run: |
          echo ""
          echo "🎉 GuideMeFast Release Summary"
          echo "=============================="
          echo "Package: guidemefast"
          echo "Version: ${{ steps.bump.outputs.new-version }}"
          echo "Release Type: ${{ steps.version.outputs.bump-type }}"
          echo ""
          echo "📦 NPM: https://www.npmjs.com/package/guidemefast"
          echo "🌐 CDN (unpkg): https://unpkg.com/guidemefast@latest/"
          echo "🌐 CDN (jsDelivr): https://cdn.jsdelivr.net/npm/guidemefast@latest/"
          echo "📚 Docs: https://github.com/${{ github.repository }}#readme"
          echo "🏷️ Release: https://github.com/${{ github.repository }}/releases/tag/${{ steps.bump.outputs.new-version }}"
          echo ""
          echo "The release is now live! 🚀"
          echo ""
          echo "📋 Post-release checklist:"
          echo "- ✅ ES5 compatibility verified"
          echo "- ✅ NPM package published"
          echo "- ✅ GitHub release created"
          echo "- ⏳ CDN propagation (5-10 minutes)"
          echo "- 📊 Monitor NPM download statistics"
          echo "- 🧪 Test package installation"
          echo "- 📝 Update documentation if needed"
          echo "- 📢 Announce release if applicable"

  # Separate job for non-release builds (PRs)
  test-only:
    if: github.event_name == 'pull_request' && github.event.action != 'closed'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

      - name: Run type check
        run: npm run type-check

      - name: Run lint
        run: npm run lint

      - name: Build and verify compatibility
        run: |
          npm run build
          
          echo "🔍 Verifying ES5 compatibility..."
          # Create inline verification for PR builds
          node -e "
          const fs = require('fs');
          const path = require('path');
          
          function checkForModernFeatures(dir) {
            const files = fs.readdirSync(dir, { withFileTypes: true });
            let hasIssues = false;
          
            files.forEach(file => {
              const fullPath = path.join(dir, file.name);
              if (file.isFile() && file.name.endsWith('.js')) {
                const content = fs.readFileSync(fullPath, 'utf8');
                if (content.includes('?.')) {
                  console.log('❌ Found optional chaining in:', fullPath);
                  hasIssues = true;
                }
                if (content.includes('??')) {
                  console.log('❌ Found nullish coalescing in:', fullPath);
                  hasIssues = true;
                }
              } else if (file.isDirectory()) {
                if (checkForModernFeatures(fullPath)) hasIssues = true;
              }
            });
            return hasIssues;
          }
          
          if (fs.existsSync('dist')) {
            if (checkForModernFeatures('dist')) {
              console.log('❌ Build contains ES6+ features that may not be compatible');
              process.exit(1);
            } else {
              console.log('✅ Build appears to be ES5 compatible');
            }
          }
          "

      - name: Verify build output
        run: |
          echo "Verifying build output..."
          REQUIRED_FILES=(
            "dist/index.js"
            "dist/index.esm.js"
            "dist/index.d.ts"
            "dist/vanilla.js"
            "dist/guidemefast.min.js"
          )
          
          for file in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "$file" ]; then
              echo "❌ Missing required file: $file"
              exit 1
            fi
          done
          echo "✅ All required files present"
          
          # Show file sizes
          echo "📊 Build sizes:"
          ls -lh dist/*.js dist/*.d.ts 2>/dev/null | awk '{print "  " $9 ": " $5}' || true

      - name: Test summary
        run: |
          echo "✅ All quality checks passed!"
          echo "This PR is ready for merge when approved."
          echo ""
          echo "Build verification completed:"
          echo "- TypeScript compilation: ✅"
          echo "- ESLint checks: ✅" 
          echo "- Unit tests: ✅"
          echo "- ES5 compatibility: ✅"
          echo "- Build output: ✅"