(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.GuideMeFast = factory());
})(this, (function () { 'use strict';

  function styleInject(css, ref) {
    if ( ref === void 0 ) ref = {};
    var insertAt = ref.insertAt;

    if (typeof document === 'undefined') { return; }

    var head = document.head || document.getElementsByTagName('head')[0];
    var style = document.createElement('style');
    style.type = 'text/css';

    if (insertAt === 'top') {
      if (head.firstChild) {
        head.insertBefore(style, head.firstChild);
      } else {
        head.appendChild(style);
      }
    } else {
      head.appendChild(style);
    }

    if (style.styleSheet) {
      style.styleSheet.cssText = css;
    } else {
      style.appendChild(document.createTextNode(css));
    }
  }

  var css_248z = ".guidemefast-overlay{font-family:-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen,Ubuntu,Cantarell,sans-serif;pointer-events:none}.guidemefast-backdrop,.guidemefast-overlay{height:100%;left:0;position:fixed;top:0;width:100%}.guidemefast-backdrop{background:rgba(0,0,0,.7);pointer-events:all;transition:opacity .3s ease}.guidemefast-highlight{animation:guidemefast-pulse 2s infinite;background:transparent;border-radius:8px;box-shadow:0 0 0 4px hsla(0,0%,100%,.2),0 0 0 2px hsla(0,0%,100%,.4),0 0 20px hsla(0,0%,100%,.3);pointer-events:none;transition:all .3s ease}@keyframes guidemefast-pulse{0%,to{box-shadow:0 0 0 4px hsla(0,0%,100%,.2),0 0 0 2px hsla(0,0%,100%,.4),0 0 20px hsla(0,0%,100%,.3)}50%{box-shadow:0 0 0 8px hsla(0,0%,100%,.1),0 0 0 4px hsla(0,0%,100%,.3),0 0 30px hsla(0,0%,100%,.4)}}.guidemefast-tooltip{animation:guidemefast-tooltip-enter .3s ease-out;background:#fff;border:1px solid rgba(0,0,0,.08);border-radius:12px;box-shadow:0 20px 40px rgba(0,0,0,.15),0 8px 16px rgba(0,0,0,.1);max-width:400px;min-width:280px;padding:0;pointer-events:all;position:relative}@keyframes guidemefast-tooltip-enter{0%{opacity:0;transform:scale(.9) translateY(10px)}to{opacity:1;transform:scale(1) translateY(0)}}.guidemefast-close{align-items:center;background:none;border:none;border-radius:6px;color:#666;cursor:pointer;display:flex;font-size:20px;height:28px;justify-content:center;position:absolute;right:12px;top:12px;transition:all .2s ease;width:28px;z-index:1}.guidemefast-close:hover{background:rgba(0,0,0,.05);color:#333}.guidemefast-progress{background:rgba(0,0,0,.05);border-radius:12px 12px 0 0;height:3px;left:0;overflow:hidden;position:absolute;right:0;top:0}.guidemefast-progress-bar{background:linear-gradient(90deg,#667eea,#764ba2);height:100%;transition:width .3s ease}.guidemefast-step-counter{background:rgba(0,0,0,.05);border-radius:12px;color:#666;font-size:12px;font-weight:500;left:16px;padding:4px 8px;position:absolute;top:12px}.guidemefast-content{padding:40px 24px 24px}.guidemefast-title{color:#333;font-size:18px;font-weight:600;line-height:1.4;margin:0 0 12px}.guidemefast-body{color:#666;font-size:14px;line-height:1.6;margin:0}.guidemefast-navigation{align-items:center;display:flex;gap:8px;justify-content:flex-end;padding:0 24px 24px}.guidemefast-btn{align-items:center;border:none;border-radius:8px;cursor:pointer;display:inline-flex;font-size:14px;font-weight:500;height:36px;justify-content:center;min-width:80px;padding:8px 16px;transition:all .2s ease}.guidemefast-btn:disabled{cursor:not-allowed;opacity:.6}.guidemefast-btn-primary{background:linear-gradient(135deg,#667eea,#764ba2);box-shadow:0 2px 8px rgba(102,126,234,.3);color:#fff}.guidemefast-btn-primary:hover:not(:disabled){box-shadow:0 4px 12px rgba(102,126,234,.4);transform:translateY(-1px)}.guidemefast-btn-secondary{background:#f8f9fa;border:1px solid #e9ecef;color:#495057}.guidemefast-btn-secondary:hover:not(:disabled){background:#e9ecef;border-color:#dee2e6}.guidemefast-btn-ghost{background:transparent;color:#6c757d;margin-right:auto}.guidemefast-btn-ghost:hover:not(:disabled){background:rgba(0,0,0,.02);color:#495057}.guidemefast-arrow{background:#fff;border:1px solid rgba(0,0,0,.08);height:12px;position:absolute;transform:rotate(45deg);width:12px}.guidemefast-arrow-top{border-left:none;border-top:none;bottom:-6px;left:50%;margin-left:-6px}.guidemefast-arrow-bottom{border-bottom:none;border-right:none;left:50%;margin-left:-6px;top:-6px}.guidemefast-arrow-left{border-bottom:none;border-left:none;margin-top:-6px;right:-6px;top:50%}.guidemefast-arrow-right{border-right:none;border-top:none;left:-6px;margin-top:-6px;top:50%}.guidemefast-theme-dark .guidemefast-tooltip{background:#2d3748;border-color:hsla(0,0%,100%,.1);color:#fff}.guidemefast-theme-dark .guidemefast-title{color:#fff}.guidemefast-theme-dark .guidemefast-body,.guidemefast-theme-dark .guidemefast-close{color:#cbd5e0}.guidemefast-theme-dark .guidemefast-close:hover{background:hsla(0,0%,100%,.1);color:#fff}.guidemefast-theme-dark .guidemefast-step-counter{background:hsla(0,0%,100%,.1);color:#cbd5e0}.guidemefast-theme-dark .guidemefast-progress{background:hsla(0,0%,100%,.1)}.guidemefast-theme-dark .guidemefast-btn-secondary{background:#4a5568;border-color:#6b7280;color:#fff}.guidemefast-theme-dark .guidemefast-btn-secondary:hover:not(:disabled){background:#6b7280}.guidemefast-theme-dark .guidemefast-btn-ghost{color:#9ca3af}.guidemefast-theme-dark .guidemefast-btn-ghost:hover:not(:disabled){background:hsla(0,0%,100%,.05);color:#cbd5e0}.guidemefast-theme-dark .guidemefast-arrow{background:#2d3748;border-color:hsla(0,0%,100%,.1)}.guidemefast-theme-material .guidemefast-tooltip{border-radius:4px;box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}.guidemefast-theme-material .guidemefast-btn{border-radius:4px;font-weight:500;letter-spacing:.5px;text-transform:uppercase}.guidemefast-theme-material .guidemefast-btn-primary{background:#1976d2;box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.guidemefast-theme-material .guidemefast-btn-primary:hover:not(:disabled){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.guidemefast-theme-material .guidemefast-progress-bar{background:#1976d2}@media (max-width:768px){.guidemefast-tooltip{margin:0 20px;max-width:calc(100vw - 40px);min-width:260px}.guidemefast-content{padding:32px 20px 20px}.guidemefast-navigation{flex-wrap:wrap;padding:0 20px 20px}.guidemefast-btn{font-size:13px;min-width:70px}.guidemefast-step-counter{font-size:11px}}@media (max-width:480px){.guidemefast-navigation{align-items:stretch;flex-direction:column}.guidemefast-btn{margin:2px 0;width:100%}.guidemefast-btn-ghost{margin-bottom:8px;order:-1}}@keyframes guidemefast-shake{0%,to{transform:translateX(0)}25%{transform:translateX(-2px)}75%{transform:translateX(2px)}}.guidemefast-shake{animation:guidemefast-shake .5s ease-in-out}@media (prefers-contrast:more){.guidemefast-tooltip{border:2px solid}.guidemefast-highlight{box-shadow:0 0 0 4px currentColor,0 0 0 6px #fff}}@media (prefers-reduced-motion:reduce){.guidemefast-highlight,.guidemefast-tooltip{animation:none}.guidemefast-btn,.guidemefast-progress-bar{transition:none}}";
  styleInject(css_248z);

  function getDefaultExportFromCjs (x) {
  	return x && x.__esModule && Object.prototype.hasOwnProperty.call(x, 'default') ? x['default'] : x;
  }

  var vanilla = {exports: {}};

  /**
   * GuideMeFast - Vanilla JavaScript Implementation
   * Beautiful, lightweight library for creating interactive guided tours
   */

  (function (module) {
  	class GuideMeFast {
  	    constructor(config) {
  	        this.config = {
  	            theme: 'light',
  	            showProgress: true,
  	            showStepNumbers: true,
  	            backdropOpacity: 0.7,
  	            highlightPadding: 8,
  	            scrollBehavior: 'smooth',
  	            zIndex: 9999,
  	            closeOnEscape: true,
  	            closeOnClickOutside: false,
  	            customStyles: {},
  	            ...config
  	        };

  	        this.currentStep = 0;
  	        this.isActive = false;
  	        this.elements = {};
  	        this.loading = false;

  	        // Bind methods
  	        this.handleKeyDown = this.handleKeyDown.bind(this);
  	        this.handleResize = this.handleResize.bind(this);
  	        this.handleNext = this.handleNext.bind(this);
  	        this.handlePrev = this.handlePrev.bind(this);
  	        this.handleSkip = this.handleSkip.bind(this);
  	        this.handleClose = this.handleClose.bind(this);
  	    }

  	    // Public API
  	    start() {
  	        if (this.isActive || !this.config.steps?.length) return;

  	        this.isActive = true;
  	        this.currentStep = 0;
  	        this.createElements();
  	        this.updateStep();
  	        this.attachEventListeners();
  	    }

  	    stop() {
  	        if (!this.isActive) return;

  	        this.isActive = false;
  	        this.removeEventListeners();
  	        this.removeElements();
  	        this.currentStep = 0;
  	    }

  	    next() {
  	        if (this.currentStep < this.config.steps.length - 1) {
  	            this.handleNext();
  	        }
  	    }

  	    prev() {
  	        if (this.currentStep > 0) {
  	            this.handlePrev();
  	        }
  	    }

  	    goToStep(stepIndex) {
  	        if (stepIndex >= 0 && stepIndex < this.config.steps.length) {
  	            this.currentStep = stepIndex;
  	            this.updateStep();
  	        }
  	    }

  	    // Private methods
  	    createElements() {
  	        // Create overlay
  	        this.elements.overlay = document.createElement('div');
  	        this.elements.overlay.className = `guidemefast-overlay guidemefast-theme-${this.config.theme}`;

  	        // Create backdrop
  	        this.elements.backdrop = document.createElement('div');
  	        this.elements.backdrop.className = 'guidemefast-backdrop';
  	        this.elements.backdrop.style.zIndex = this.config.zIndex;
  	        this.elements.backdrop.style.opacity = this.config.backdropOpacity;
  	        Object.assign(this.elements.backdrop.style, this.config.customStyles.backdrop || {});

  	        if (this.config.closeOnClickOutside) {
  	            this.elements.backdrop.addEventListener('click', this.handleClose);
  	        }

  	        // Create highlight
  	        this.elements.highlight = document.createElement('div');
  	        this.elements.highlight.className = 'guidemefast-highlight';
  	        this.elements.highlight.style.zIndex = this.config.zIndex + 1;
  	        Object.assign(this.elements.highlight.style, this.config.customStyles.highlight || {});

  	        // Create tooltip
  	        this.elements.tooltip = document.createElement('div');
  	        this.elements.tooltip.className = 'guidemefast-tooltip';
  	        this.elements.tooltip.style.zIndex = this.config.zIndex + 2;
  	        Object.assign(this.elements.tooltip.style, this.config.customStyles.tooltip || {});

  	        // Create tooltip content
  	        this.createTooltipContent();

  	        // Append to overlay
  	        this.elements.overlay.appendChild(this.elements.backdrop);
  	        this.elements.overlay.appendChild(this.elements.highlight);
  	        this.elements.overlay.appendChild(this.elements.tooltip);

  	        // Append to body
  	        document.body.appendChild(this.elements.overlay);
  	    }

  	    createTooltipContent() {
  	        this.elements.tooltip.innerHTML = `
      <button class="guidemefast-close" aria-label="Close tour">×</button>
      
      ${this.config.showProgress ? `
        <div class="guidemefast-progress">
          <div class="guidemefast-progress-bar"></div>
        </div>
      ` : ''}
      
      ${this.config.showStepNumbers ? `
        <div class="guidemefast-step-counter"></div>
      ` : ''}
      
      <div class="guidemefast-content">
        <h3 class="guidemefast-title"></h3>
        <div class="guidemefast-body"></div>
      </div>
      
      <div class="guidemefast-navigation">
        <button class="guidemefast-btn guidemefast-btn-ghost guidemefast-skip">Skip Tour</button>
        <button class="guidemefast-btn guidemefast-btn-secondary guidemefast-prev">Previous</button>
        <button class="guidemefast-btn guidemefast-btn-primary guidemefast-next">Next</button>
      </div>
      
      <div class="guidemefast-arrow"></div>
    `;

  	        // Get references to interactive elements
  	        this.elements.closeBtn = this.elements.tooltip.querySelector('.guidemefast-close');
  	        this.elements.skipBtn = this.elements.tooltip.querySelector('.guidemefast-skip');
  	        this.elements.prevBtn = this.elements.tooltip.querySelector('.guidemefast-prev');
  	        this.elements.nextBtn = this.elements.tooltip.querySelector('.guidemefast-next');
  	        this.elements.progressBar = this.elements.tooltip.querySelector('.guidemefast-progress-bar');
  	        this.elements.stepCounter = this.elements.tooltip.querySelector('.guidemefast-step-counter');
  	        this.elements.title = this.elements.tooltip.querySelector('.guidemefast-title');
  	        this.elements.body = this.elements.tooltip.querySelector('.guidemefast-body');
  	        this.elements.arrow = this.elements.tooltip.querySelector('.guidemefast-arrow');

  	        // Attach event listeners
  	        this.elements.closeBtn?.addEventListener('click', this.handleClose);
  	        this.elements.skipBtn?.addEventListener('click', this.handleSkip);
  	        this.elements.prevBtn?.addEventListener('click', this.handlePrev);
  	        this.elements.nextBtn?.addEventListener('click', this.handleNext);
  	    }

  	    updateStep() {
  	        const step = this.config.steps[this.currentStep];
  	        if (!step) return;

  	        // Update target position and highlight
  	        this.updateHighlight(step.target);

  	        // Update tooltip content
  	        this.updateTooltipContent(step);

  	        // Update tooltip position
  	        this.updateTooltipPosition(step);

  	        // Scroll to element if needed
  	        this.scrollToElement(step.target);
  	    }

  	    updateHighlight(target) {
  	        const element = document.querySelector(target);
  	        if (!element) return;

  	        const rect = element.getBoundingClientRect();
  	        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  	        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

  	        const highlightStyle = {
  	            position: 'absolute',
  	            top: (rect.top + scrollTop - this.config.highlightPadding) + 'px',
  	            left: (rect.left + scrollLeft - this.config.highlightPadding) + 'px',
  	            width: (rect.width + this.config.highlightPadding * 2) + 'px',
  	            height: (rect.height + this.config.highlightPadding * 2) + 'px'
  	        };

  	        Object.assign(this.elements.highlight.style, highlightStyle);
  	    }

  	    updateTooltipContent(step) {
  	        // Update title
  	        if (this.elements.title) {
  	            this.elements.title.textContent = step.title || '';
  	            this.elements.title.style.display = step.title ? 'block' : 'none';
  	        }

  	        // Update body
  	        if (this.elements.body) {
  	            this.elements.body.innerHTML = step.content || '';
  	        }

  	        // Update step counter
  	        if (this.elements.stepCounter && this.config.showStepNumbers) {
  	            this.elements.stepCounter.textContent = `${this.currentStep + 1} of ${this.config.steps.length}`;
  	        }

  	        // Update progress bar
  	        if (this.elements.progressBar && this.config.showProgress) {
  	            const progress = ((this.currentStep + 1) / this.config.steps.length) * 100;
  	            this.elements.progressBar.style.width = progress + '%';
  	        }

  	        // Update navigation buttons
  	        const isFirstStep = this.currentStep === 0;
  	        const isLastStep = this.currentStep === this.config.steps.length - 1;

  	        if (this.elements.prevBtn) {
  	            this.elements.prevBtn.style.display =
  	                (isFirstStep || step.showPrev === false) ? 'none' : 'inline-flex';
  	        }

  	        if (this.elements.skipBtn) {
  	            this.elements.skipBtn.style.display =
  	                (isLastStep || step.showSkip === false) ? 'none' : 'inline-flex';
  	        }

  	        if (this.elements.nextBtn) {
  	            this.elements.nextBtn.textContent = isLastStep ? 'Finish' : 'Next';
  	            this.elements.nextBtn.style.display = step.showNext === false ? 'none' : 'inline-flex';
  	        }

  	        // Update custom class
  	        if (step.customClass) {
  	            this.elements.tooltip.className = `guidemefast-tooltip ${step.customClass}`;
  	        }

  	        // Update arrow direction
  	        if (this.elements.arrow) {
  	            const placement = step.placement || 'top';
  	            this.elements.arrow.className = `guidemefast-arrow guidemefast-arrow-${placement}`;
  	        }
  	    }

  	    updateTooltipPosition(step) {
  	        const target = document.querySelector(step.target);
  	        if (!target) return;

  	        const targetRect = target.getBoundingClientRect();
  	        const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
  	        const scrollLeft = window.pageXOffset || document.documentElement.scrollLeft;

  	        const targetPos = {
  	            top: targetRect.top + scrollTop,
  	            left: targetRect.left + scrollLeft,
  	            width: targetRect.width,
  	            height: targetRect.height
  	        };

  	        const tooltipRect = this.elements.tooltip.getBoundingClientRect();
  	        const tooltipSize = {
  	            width: tooltipRect.width || 320,
  	            height: tooltipRect.height || 200
  	        };

  	        const position = this.calculateTooltipPosition(
  	            targetPos,
  	            step.placement || 'top',
  	            tooltipSize,
  	            step.offset || { x: 0, y: 0 }
  	        );

  	        this.elements.tooltip.style.position = 'absolute';
  	        this.elements.tooltip.style.top = position.top + 'px';
  	        this.elements.tooltip.style.left = position.left + 'px';
  	    }

  	    calculateTooltipPosition(targetPos, placement, tooltipSize, offset) {
  	        const gap = 12;
  	        let top = 0;
  	        let left = 0;

  	        switch (placement) {
  	            case 'top':
  	                top = targetPos.top - tooltipSize.height - gap + offset.y;
  	                left = targetPos.left + (targetPos.width / 2) - (tooltipSize.width / 2) + offset.x;
  	                break;
  	            case 'bottom':
  	                top = targetPos.top + targetPos.height + gap + offset.y;
  	                left = targetPos.left + (targetPos.width / 2) - (tooltipSize.width / 2) + offset.x;
  	                break;
  	            case 'left':
  	                top = targetPos.top + (targetPos.height / 2) - (tooltipSize.height / 2) + offset.y;
  	                left = targetPos.left - tooltipSize.width - gap + offset.x;
  	                break;
  	            case 'right':
  	                top = targetPos.top + (targetPos.height / 2) - (tooltipSize.height / 2) + offset.y;
  	                left = targetPos.left + targetPos.width + gap + offset.x;
  	                break;
  	            default:
  	                top = targetPos.top - tooltipSize.height - gap + offset.y;
  	                left = targetPos.left + (targetPos.width / 2) - (tooltipSize.width / 2) + offset.x;
  	        }

  	        // Keep tooltip within viewport
  	        const viewportWidth = window.innerWidth;
  	        const viewportHeight = window.innerHeight;
  	        const scrollTop = window.pageYOffset;
  	        const scrollLeft = window.pageXOffset;

  	        if (left < scrollLeft) left = scrollLeft + 10;
  	        if (left + tooltipSize.width > scrollLeft + viewportWidth) {
  	            left = scrollLeft + viewportWidth - tooltipSize.width - 10;
  	        }
  	        if (top < scrollTop) top = scrollTop + 10;
  	        if (top + tooltipSize.height > scrollTop + viewportHeight) {
  	            top = scrollTop + viewportHeight - tooltipSize.height - 10;
  	        }

  	        return { top, left };
  	    }

  	    scrollToElement(target) {
  	        const element = document.querySelector(target);
  	        if (element) {
  	            element.scrollIntoView({
  	                behavior: this.config.scrollBehavior,
  	                block: 'center',
  	                inline: 'nearest'
  	            });
  	        }
  	    }

  	    // Event handlers
  	    async handleNext() {
  	        if (this.loading) return;

  	        const step = this.config.steps[this.currentStep];
  	        const isLastStep = this.currentStep === this.config.steps.length - 1;

  	        this.setLoading(true);

  	        try {
  	            if (step?.onNext) {
  	                await step.onNext();
  	            }

  	            if (isLastStep) {
  	                this.config.onComplete?.();
  	                this.stop();
  	            } else {
  	                this.currentStep++;
  	                this.updateStep();
  	            }
  	        } catch (error) {
  	            console.error('Error in onNext:', error);
  	        } finally {
  	            this.setLoading(false);
  	        }
  	    }

  	    async handlePrev() {
  	        if (this.loading || this.currentStep === 0) return;

  	        const step = this.config.steps[this.currentStep];

  	        this.setLoading(true);

  	        try {
  	            if (step?.onPrev) {
  	                await step.onPrev();
  	            }

  	            this.currentStep--;
  	            this.updateStep();
  	        } catch (error) {
  	            console.error('Error in onPrev:', error);
  	        } finally {
  	            this.setLoading(false);
  	        }
  	    }

  	    async handleSkip() {
  	        if (this.loading) return;

  	        const step = this.config.steps[this.currentStep];

  	        this.setLoading(true);

  	        try {
  	            if (step?.onSkip) {
  	                await step.onSkip();
  	            } else if (this.config.onSkip) {
  	                await this.config.onSkip();
  	            }
  	        } catch (error) {
  	            console.error('Error in onSkip:', error);
  	        } finally {
  	            this.setLoading(false);
  	            this.stop();
  	        }
  	    }

  	    handleClose() {
  	        this.stop();
  	    }

  	    handleKeyDown(e) {
  	        if (!this.config.closeOnEscape || e.key !== 'Escape') return;
  	        this.handleClose();
  	    }

  	    handleResize() {
  	        if (!this.isActive) return;
  	        setTimeout(() => {
  	            this.updateStep();
  	        }, 100);
  	    }

  	    setLoading(loading) {
  	        this.loading = loading;

  	        const buttons = [this.elements.nextBtn, this.elements.prevBtn, this.elements.skipBtn];
  	        buttons.forEach(btn => {
  	            if (btn) {
  	                btn.disabled = loading;
  	                if (btn === this.elements.nextBtn && loading) {
  	                    btn.textContent = 'Loading...';
  	                }
  	            }
  	        });
  	    }

  	    attachEventListeners() {
  	        if (this.config.closeOnEscape) {
  	            document.addEventListener('keydown', this.handleKeyDown);
  	        }
  	        window.addEventListener('resize', this.handleResize);
  	    }

  	    removeEventListeners() {
  	        document.removeEventListener('keydown', this.handleKeyDown);
  	        window.removeEventListener('resize', this.handleResize);
  	    }

  	    removeElements() {
  	        if (this.elements.overlay && this.elements.overlay.parentNode) {
  	            this.elements.overlay.parentNode.removeChild(this.elements.overlay);
  	        }
  	        this.elements = {};
  	    }
  	}

  	// Global API for CDN usage
  	if (typeof window !== 'undefined') {
  	    window.GuideMeFast = GuideMeFast;
  	}

  	// Export for module usage
  	if (module.exports) {
  	    module.exports = GuideMeFast;
  	} 
  } (vanilla));

  var vanillaExports = vanilla.exports;
  var GuideMeFast = /*@__PURE__*/getDefaultExportFromCjs(vanillaExports);

  // Auto-initialize from HTML data attributes
  document.addEventListener('DOMContentLoaded', () => {
      const autoInitElements = document.querySelectorAll('[data-guidemefast-auto]');

      autoInitElements.forEach(element => {
          const config = JSON.parse(element.getAttribute('data-guidemefast-config') || '{}');
          const triggerSelector = element.getAttribute('data-guidemefast-trigger');

          if (triggerSelector) {
              const triggerElement = document.querySelector(triggerSelector);
              if (triggerElement) {
                  const tour = new GuideMeFast(config);
                  triggerElement.addEventListener('click', () => {
                      tour.start();
                  });
              }
          }
      });
  });

  // Export to global scope
  window.GuideMeFast = GuideMeFast;

  return GuideMeFast;

}));
//# sourceMappingURL=guidemefast.min.js.map
